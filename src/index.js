/**
 * Apitax
 * The API for the frontend of Apitax
 *
 * OpenAPI spec version: 2
 * Contact: shawn.clake@nopatience.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AuthResponse', 'model/Command', 'model/ErrorResponse', 'model/Execute', 'model/Response', 'model/Script', 'model/ScriptCreate', 'model/ScriptDelete', 'model/ScriptRename', 'model/ScriptSave', 'model/User', 'model/UserAuth', 'model/UserCreate', 'model/UserDelete', 'model/UserSave', 'api/ApiApi', 'api/ApitaxApi', 'api/CommandtaxApi', 'api/DriversApi', 'api/ScriptaxApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/AuthResponse'), require('./model/Command'), require('./model/ErrorResponse'), require('./model/Execute'), require('./model/Response'), require('./model/Script'), require('./model/ScriptCreate'), require('./model/ScriptDelete'), require('./model/ScriptRename'), require('./model/ScriptSave'), require('./model/User'), require('./model/UserAuth'), require('./model/UserCreate'), require('./model/UserDelete'), require('./model/UserSave'), require('./api/ApiApi'), require('./api/ApitaxApi'), require('./api/CommandtaxApi'), require('./api/DriversApi'), require('./api/ScriptaxApi'));
  }
}(function(ApiClient, AuthResponse, Command, ErrorResponse, Execute, Response, Script, ScriptCreate, ScriptDelete, ScriptRename, ScriptSave, User, UserAuth, UserCreate, UserDelete, UserSave, ApiApi, ApitaxApi, CommandtaxApi, DriversApi, ScriptaxApi) {
  'use strict';

  /**
   * JS Client for Apitax.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var ApitaxJsClient = require('index'); // See note below*.
   * var xxxSvc = new ApitaxJsClient.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new ApitaxJsClient.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new ApitaxJsClient.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new ApitaxJsClient.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 2
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The AuthResponse model constructor.
     * @property {module:model/AuthResponse}
     */
    AuthResponse: AuthResponse,
    /**
     * The Command model constructor.
     * @property {module:model/Command}
     */
    Command: Command,
    /**
     * The ErrorResponse model constructor.
     * @property {module:model/ErrorResponse}
     */
    ErrorResponse: ErrorResponse,
    /**
     * The Execute model constructor.
     * @property {module:model/Execute}
     */
    Execute: Execute,
    /**
     * The Response model constructor.
     * @property {module:model/Response}
     */
    Response: Response,
    /**
     * The Script model constructor.
     * @property {module:model/Script}
     */
    Script: Script,
    /**
     * The ScriptCreate model constructor.
     * @property {module:model/ScriptCreate}
     */
    ScriptCreate: ScriptCreate,
    /**
     * The ScriptDelete model constructor.
     * @property {module:model/ScriptDelete}
     */
    ScriptDelete: ScriptDelete,
    /**
     * The ScriptRename model constructor.
     * @property {module:model/ScriptRename}
     */
    ScriptRename: ScriptRename,
    /**
     * The ScriptSave model constructor.
     * @property {module:model/ScriptSave}
     */
    ScriptSave: ScriptSave,
    /**
     * The User model constructor.
     * @property {module:model/User}
     */
    User: User,
    /**
     * The UserAuth model constructor.
     * @property {module:model/UserAuth}
     */
    UserAuth: UserAuth,
    /**
     * The UserCreate model constructor.
     * @property {module:model/UserCreate}
     */
    UserCreate: UserCreate,
    /**
     * The UserDelete model constructor.
     * @property {module:model/UserDelete}
     */
    UserDelete: UserDelete,
    /**
     * The UserSave model constructor.
     * @property {module:model/UserSave}
     */
    UserSave: UserSave,
    /**
     * The ApiApi service constructor.
     * @property {module:api/ApiApi}
     */
    ApiApi: ApiApi,
    /**
     * The ApitaxApi service constructor.
     * @property {module:api/ApitaxApi}
     */
    ApitaxApi: ApitaxApi,
    /**
     * The CommandtaxApi service constructor.
     * @property {module:api/CommandtaxApi}
     */
    CommandtaxApi: CommandtaxApi,
    /**
     * The DriversApi service constructor.
     * @property {module:api/DriversApi}
     */
    DriversApi: DriversApi,
    /**
     * The ScriptaxApi service constructor.
     * @property {module:api/ScriptaxApi}
     */
    ScriptaxApi: ScriptaxApi
  };

  return exports;
}));
