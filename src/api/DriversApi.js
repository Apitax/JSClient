/**
 * Apitax
 * The API for the frontend of Apitax
 *
 * OpenAPI spec version: 2
 * Contact: shawn.clake@nopatience.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorResponse', 'model/Response'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorResponse'), require('../model/Response'));
  } else {
    // Browser globals (root is window)
    if (!root.ApitaxJsClient) {
      root.ApitaxJsClient = {};
    }
    root.ApitaxJsClient.DriversApi = factory(root.ApitaxJsClient.ApiClient, root.ApitaxJsClient.ErrorResponse, root.ApitaxJsClient.Response);
  }
}(this, function(ApiClient, ErrorResponse, Response) {
  'use strict';

  /**
   * Drivers service.
   * @module api/DriversApi
   * @version 2
   */

  /**
   * Constructs a new DriversApi. 
   * @alias module:api/DriversApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getDriverBlacklist operation.
     * @callback module:api/DriversApi~getDriverBlacklistCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the blacklist in the driver
     * Retrieve the blacklist in the driver
     * @param {String} driver The driver to use for the request. ie. github
     * @param {module:api/DriversApi~getDriverBlacklistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    this.getDriverBlacklist = function(driver, callback) {
      var postBody = null;

      // verify the required parameter 'driver' is set
      if (driver === undefined || driver === null) {
        throw new Error("Missing the required parameter 'driver' when calling getDriverBlacklist");
      }


      var pathParams = {
        'driver': driver
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Response;

      return this.apiClient.callApi(
        '/drivers/{driver}/blacklist', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDriverConfig operation.
     * @callback module:api/DriversApi~getDriverConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the config of a loaded driver
     * Retrieve the config of a loaded driver
     * @param {String} driver The driver to use for the request. ie. github
     * @param {module:api/DriversApi~getDriverConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    this.getDriverConfig = function(driver, callback) {
      var postBody = null;

      // verify the required parameter 'driver' is set
      if (driver === undefined || driver === null) {
        throw new Error("Missing the required parameter 'driver' when calling getDriverConfig");
      }


      var pathParams = {
        'driver': driver
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Response;

      return this.apiClient.callApi(
        '/drivers/{driver}/config', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDriverList operation.
     * @callback module:api/DriversApi~getDriverListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the catalog of drivers
     * Retrieve the catalog of drivers
     * @param {module:api/DriversApi~getDriverListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    this.getDriverList = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Response;

      return this.apiClient.callApi(
        '/drivers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDriverStatus operation.
     * @callback module:api/DriversApi~getDriverStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the status of a loaded driver
     * Retrieve the status of a loaded driver
     * @param {String} driver The driver to use for the request. ie. github
     * @param {module:api/DriversApi~getDriverStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    this.getDriverStatus = function(driver, callback) {
      var postBody = null;

      // verify the required parameter 'driver' is set
      if (driver === undefined || driver === null) {
        throw new Error("Missing the required parameter 'driver' when calling getDriverStatus");
      }


      var pathParams = {
        'driver': driver
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Response;

      return this.apiClient.callApi(
        '/drivers/{driver}/status', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDriverWhitelist operation.
     * @callback module:api/DriversApi~getDriverWhitelistCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the whitelist in the driver
     * Retrieve the whitelist in the driver
     * @param {String} driver The driver to use for the request. ie. github
     * @param {module:api/DriversApi~getDriverWhitelistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    this.getDriverWhitelist = function(driver, callback) {
      var postBody = null;

      // verify the required parameter 'driver' is set
      if (driver === undefined || driver === null) {
        throw new Error("Missing the required parameter 'driver' when calling getDriverWhitelist");
      }


      var pathParams = {
        'driver': driver
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Response;

      return this.apiClient.callApi(
        '/drivers/{driver}/whitelist', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
