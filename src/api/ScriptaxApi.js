/**
 * Apitax
 * The API for the frontend of Apitax
 *
 * OpenAPI spec version: 2
 * Contact: shawn.clake@nopatience.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorResponse', 'model/Response', 'model/ScriptCreate', 'model/ScriptDelete', 'model/ScriptRename', 'model/ScriptSave'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorResponse'), require('../model/Response'), require('../model/ScriptCreate'), require('../model/ScriptDelete'), require('../model/ScriptRename'), require('../model/ScriptSave'));
  } else {
    // Browser globals (root is window)
    if (!root.ApitaxJsClient) {
      root.ApitaxJsClient = {};
    }
    root.ApitaxJsClient.ScriptaxApi = factory(root.ApitaxJsClient.ApiClient, root.ApitaxJsClient.ErrorResponse, root.ApitaxJsClient.Response, root.ApitaxJsClient.ScriptCreate, root.ApitaxJsClient.ScriptDelete, root.ApitaxJsClient.ScriptRename, root.ApitaxJsClient.ScriptSave);
  }
}(this, function(ApiClient, ErrorResponse, Response, ScriptCreate, ScriptDelete, ScriptRename, ScriptSave) {
  'use strict';

  /**
   * Scriptax service.
   * @module api/ScriptaxApi
   * @version 2
   */

  /**
   * Constructs a new ScriptaxApi. 
   * @alias module:api/ScriptaxApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createDriverScript operation.
     * @callback module:api/ScriptaxApi~createDriverScriptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new script
     * Create a new script
     * @param {String} driver The driver to use for the request. ie. github
     * @param {Object} opts Optional parameters
     * @param {module:model/ScriptCreate} opts.scriptCreate The data needed to create this script
     * @param {module:api/ScriptaxApi~createDriverScriptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    this.createDriverScript = function(driver, opts, callback) {
      opts = opts || {};
      var postBody = opts['scriptCreate'];

      // verify the required parameter 'driver' is set
      if (driver === undefined || driver === null) {
        throw new Error("Missing the required parameter 'driver' when calling createDriverScript");
      }


      var pathParams = {
        'driver': driver
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Response;

      return this.apiClient.callApi(
        '/drivers/{driver}/scriptax/scripts', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDriverScript operation.
     * @callback module:api/ScriptaxApi~deleteDriverScriptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a script
     * Delete a script
     * @param {String} driver The driver to use for the request. ie. github
     * @param {Object} opts Optional parameters
     * @param {module:model/ScriptDelete} opts.scriptDelete The data needed to delete this script
     * @param {module:api/ScriptaxApi~deleteDriverScriptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    this.deleteDriverScript = function(driver, opts, callback) {
      opts = opts || {};
      var postBody = opts['scriptDelete'];

      // verify the required parameter 'driver' is set
      if (driver === undefined || driver === null) {
        throw new Error("Missing the required parameter 'driver' when calling deleteDriverScript");
      }


      var pathParams = {
        'driver': driver
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Response;

      return this.apiClient.callApi(
        '/drivers/{driver}/scriptax/scripts', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDriverScript operation.
     * @callback module:api/ScriptaxApi~getDriverScriptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the contents of a script
     * Retrieve the contents of a script
     * @param {String} driver The driver to use for the request. ie. github
     * @param {Object} opts Optional parameters
     * @param {String} opts.script The script name.
     * @param {module:api/ScriptaxApi~getDriverScriptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    this.getDriverScript = function(driver, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'driver' is set
      if (driver === undefined || driver === null) {
        throw new Error("Missing the required parameter 'driver' when calling getDriverScript");
      }


      var pathParams = {
        'driver': driver
      };
      var queryParams = {
        'script': opts['script'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Response;

      return this.apiClient.callApi(
        '/drivers/{driver}/scriptax/scripts', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDriverScriptCatalog operation.
     * @callback module:api/ScriptaxApi~getDriverScriptCatalogCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the script catalog
     * Retrieve the script catalog
     * @param {String} driver The driver to use for the request. ie. github
     * @param {module:api/ScriptaxApi~getDriverScriptCatalogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    this.getDriverScriptCatalog = function(driver, callback) {
      var postBody = null;

      // verify the required parameter 'driver' is set
      if (driver === undefined || driver === null) {
        throw new Error("Missing the required parameter 'driver' when calling getDriverScriptCatalog");
      }


      var pathParams = {
        'driver': driver
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Response;

      return this.apiClient.callApi(
        '/drivers/{driver}/scriptax/catalog', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the renameDriverScript operation.
     * @callback module:api/ScriptaxApi~renameDriverScriptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rename a script
     * Rename a script
     * @param {String} driver The driver to use for the request. ie. github
     * @param {Object} opts Optional parameters
     * @param {module:model/ScriptRename} opts.scriptRename The data needed to rename this script
     * @param {module:api/ScriptaxApi~renameDriverScriptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    this.renameDriverScript = function(driver, opts, callback) {
      opts = opts || {};
      var postBody = opts['scriptRename'];

      // verify the required parameter 'driver' is set
      if (driver === undefined || driver === null) {
        throw new Error("Missing the required parameter 'driver' when calling renameDriverScript");
      }


      var pathParams = {
        'driver': driver
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Response;

      return this.apiClient.callApi(
        '/drivers/{driver}/scriptax/scripts', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveDriverScript operation.
     * @callback module:api/ScriptaxApi~saveDriverScriptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save a script
     * Save a script
     * @param {String} driver The driver to use for the request. ie. github
     * @param {Object} opts Optional parameters
     * @param {module:model/ScriptSave} opts.scriptSave The data needed to save this script
     * @param {module:api/ScriptaxApi~saveDriverScriptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    this.saveDriverScript = function(driver, opts, callback) {
      opts = opts || {};
      var postBody = opts['scriptSave'];

      // verify the required parameter 'driver' is set
      if (driver === undefined || driver === null) {
        throw new Error("Missing the required parameter 'driver' when calling saveDriverScript");
      }


      var pathParams = {
        'driver': driver
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Response;

      return this.apiClient.callApi(
        '/drivers/{driver}/scriptax/scripts', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
