/**
 * Apitax
 * The API for the frontend of Apitax
 *
 * OpenAPI spec version: 2
 * Contact: shawn.clake@nopatience.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import Response from '../model/Response';

/**
* Drivers service.
* @module api/DriversApi
* @version 2
*/
export default class DriversApi {

    /**
    * Constructs a new DriversApi. 
    * @alias module:api/DriversApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getDriverBlacklist operation.
     * @callback module:api/DriversApi~getDriverBlacklistCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the blacklist in the driver
     * Retrieve the blacklist in the driver
     * @param {String} driver The driver to use for the request. ie. github
     * @param {module:api/DriversApi~getDriverBlacklistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    getDriverBlacklist(driver, callback) {
      let postBody = null;

      // verify the required parameter 'driver' is set
      if (driver === undefined || driver === null) {
        throw new Error("Missing the required parameter 'driver' when calling getDriverBlacklist");
      }


      let pathParams = {
        'driver': driver
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/drivers/{driver}/blacklist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDriverConfig operation.
     * @callback module:api/DriversApi~getDriverConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the config of a loaded driver
     * Retrieve the config of a loaded driver
     * @param {String} driver The driver to use for the request. ie. github
     * @param {module:api/DriversApi~getDriverConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    getDriverConfig(driver, callback) {
      let postBody = null;

      // verify the required parameter 'driver' is set
      if (driver === undefined || driver === null) {
        throw new Error("Missing the required parameter 'driver' when calling getDriverConfig");
      }


      let pathParams = {
        'driver': driver
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/drivers/{driver}/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDriverList operation.
     * @callback module:api/DriversApi~getDriverListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the catalog of drivers
     * Retrieve the catalog of drivers
     * @param {module:api/DriversApi~getDriverListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    getDriverList(callback) {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/drivers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDriverStatus operation.
     * @callback module:api/DriversApi~getDriverStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the status of a loaded driver
     * Retrieve the status of a loaded driver
     * @param {String} driver The driver to use for the request. ie. github
     * @param {module:api/DriversApi~getDriverStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    getDriverStatus(driver, callback) {
      let postBody = null;

      // verify the required parameter 'driver' is set
      if (driver === undefined || driver === null) {
        throw new Error("Missing the required parameter 'driver' when calling getDriverStatus");
      }


      let pathParams = {
        'driver': driver
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/drivers/{driver}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDriverWhitelist operation.
     * @callback module:api/DriversApi~getDriverWhitelistCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the whitelist in the driver
     * Retrieve the whitelist in the driver
     * @param {String} driver The driver to use for the request. ie. github
     * @param {module:api/DriversApi~getDriverWhitelistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    getDriverWhitelist(driver, callback) {
      let postBody = null;

      // verify the required parameter 'driver' is set
      if (driver === undefined || driver === null) {
        throw new Error("Missing the required parameter 'driver' when calling getDriverWhitelist");
      }


      let pathParams = {
        'driver': driver
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/drivers/{driver}/whitelist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
