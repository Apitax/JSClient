/**
 * Apitax
 * The API for the frontend of Apitax
 *
 * OpenAPI spec version: 2
 * Contact: shawn.clake@nopatience.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AuthResponse from '../model/AuthResponse';
import ErrorResponse from '../model/ErrorResponse';
import Response from '../model/Response';
import UserAuth from '../model/UserAuth';
import UserCreate from '../model/UserCreate';
import UserDelete from '../model/UserDelete';
import UserSave from '../model/UserSave';

/**
* Apitax service.
* @module api/ApitaxApi
* @version 2
*/
export default class ApitaxApi {

    /**
    * Constructs a new ApitaxApi. 
    * @alias module:api/ApitaxApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the authenticate operation.
     * @callback module:api/ApitaxApi~authenticateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Authenticate
     * Authenticate with the API
     * @param {Object} opts Optional parameters
     * @param {module:model/UserAuth} opts.user The user authentication object.
     * @param {module:api/ApitaxApi~authenticateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthResponse}
     */
    authenticate(opts, callback) {
      opts = opts || {};
      let postBody = opts['user'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthResponse;

      return this.apiClient.callApi(
        '/apitax/auth', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createUser operation.
     * @callback module:api/ApitaxApi~createUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new user
     * Create a new user
     * @param {String} user Create user with this name
     * @param {String} driver The driver to use for the request. ie. github
     * @param {Object} opts Optional parameters
     * @param {module:model/UserCreate} opts.userCreate The data needed to create this user
     * @param {module:api/ApitaxApi~createUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    createUser(user, driver, opts, callback) {
      opts = opts || {};
      let postBody = opts['userCreate'];

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling createUser");
      }

      // verify the required parameter 'driver' is set
      if (driver === undefined || driver === null) {
        throw new Error("Missing the required parameter 'driver' when calling createUser");
      }


      let pathParams = {
        'user': user,
        'driver': driver
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/drivers/{driver}/apitax/users/{user}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUser operation.
     * @callback module:api/ApitaxApi~deleteUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a user
     * Delete a user
     * @param {String} user Delete user with this name
     * @param {String} driver The driver to use for the request. ie. github
     * @param {Object} opts Optional parameters
     * @param {module:model/UserDelete} opts.userDelete The data needed to delete this user
     * @param {module:api/ApitaxApi~deleteUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    deleteUser(user, driver, opts, callback) {
      opts = opts || {};
      let postBody = opts['userDelete'];

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling deleteUser");
      }

      // verify the required parameter 'driver' is set
      if (driver === undefined || driver === null) {
        throw new Error("Missing the required parameter 'driver' when calling deleteUser");
      }


      let pathParams = {
        'user': user,
        'driver': driver
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/drivers/{driver}/apitax/users/{user}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getConfig operation.
     * @callback module:api/ApitaxApi~getConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the system config
     * Retrieve the system config
     * @param {module:api/ApitaxApi~getConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    getConfig(callback) {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/apitax/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLog operation.
     * @callback module:api/ApitaxApi~getLogCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the logs
     * Retrieve the logs
     * @param {String} log Get this log
     * @param {module:api/ApitaxApi~getLogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    getLog(log, callback) {
      let postBody = null;

      // verify the required parameter 'log' is set
      if (log === undefined || log === null) {
        throw new Error("Missing the required parameter 'log' when calling getLog");
      }


      let pathParams = {
        'log': log
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/apitax/logs/{log}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUser operation.
     * @callback module:api/ApitaxApi~getUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a user
     * Retrieve a user
     * @param {String} user Get user with this name
     * @param {String} driver The driver to use for the request. ie. github
     * @param {module:api/ApitaxApi~getUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    getUser(user, driver, callback) {
      let postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling getUser");
      }

      // verify the required parameter 'driver' is set
      if (driver === undefined || driver === null) {
        throw new Error("Missing the required parameter 'driver' when calling getUser");
      }


      let pathParams = {
        'user': user,
        'driver': driver
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/drivers/{driver}/apitax/users/{user}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserList operation.
     * @callback module:api/ApitaxApi~getUserListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of users
     * Retrieve a list of users
     * @param {String} driver The driver to use for the request. ie. github
     * @param {module:api/ApitaxApi~getUserListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    getUserList(driver, callback) {
      let postBody = null;

      // verify the required parameter 'driver' is set
      if (driver === undefined || driver === null) {
        throw new Error("Missing the required parameter 'driver' when calling getUserList");
      }


      let pathParams = {
        'driver': driver
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/drivers/{driver}/apitax/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the refreshToken operation.
     * @callback module:api/ApitaxApi~refreshTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserAuth} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refreshes login token using refresh token
     * Refreshes login token using refresh token
     * @param {module:api/ApitaxApi~refreshTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserAuth}
     */
    refreshToken(callback) {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserAuth;

      return this.apiClient.callApi(
        '/apitax/auth/refresh', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveUser operation.
     * @callback module:api/ApitaxApi~saveUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save a user
     * Save a user
     * @param {String} user Save user with this name
     * @param {String} driver The driver to use for the request. ie. github
     * @param {Object} opts Optional parameters
     * @param {module:model/UserSave} opts.userSave The data needed to save this user
     * @param {module:api/ApitaxApi~saveUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    saveUser(user, driver, opts, callback) {
      opts = opts || {};
      let postBody = opts['userSave'];

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling saveUser");
      }

      // verify the required parameter 'driver' is set
      if (driver === undefined || driver === null) {
        throw new Error("Missing the required parameter 'driver' when calling saveUser");
      }


      let pathParams = {
        'user': user,
        'driver': driver
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/drivers/{driver}/apitax/users/{user}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the systemStatus operation.
     * @callback module:api/ApitaxApi~systemStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the system status
     * Retrieve the system status
     * @param {module:api/ApitaxApi~systemStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    systemStatus(callback) {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/apitax/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
